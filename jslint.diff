--- raw.jslint.js	2018-09-11 18:31:04.000000000 +0700
+++ lib.jslint.js	2018-09-12 17:35:30.000000000 +0700
@@ -1,7 +1,263 @@
+#!/usr/bin/env node
+/*
+ * lib.jslint.js (2018.9.8)
+ * https://github.com/kaizhu256/node-jslint-lite
+ * this zero-dependency package will provide browser-compatible versions of jslint (v2014.7.8 and v2016.10.24) and csslint (v1.0.5), with a working web-demo
+ *
+ */
+
+
+
+/* istanbul instrument in package jslint */
+/* jslint-utility2 */
+/*jslint
+    bitwise: true,
+    browser: true,
+    for: true,
+    maxerr: 4,
+    maxlen: 100,
+    multivar: true,
+    node: true,
+    this: true,
+*/
+/*global global*/
+(function () {
+    "use strict";
+    var local;
+
+
+
+    /* istanbul ignore next */
+    // run shared js-env code - init-before
+    (function () {
+        // init debug_inline
+        (function () {
+            var consoleError, context;
+            consoleError = console.error;
+            context = (typeof window === "object" && window) || global;
+            context["debug\u0049nline"] = context["debug\u0049nline"] || function (arg0) {
+            /*
+             * this function will both print arg0 to stderr and return it
+             */
+                // debug arguments
+                context["debug\u0049nlineArguments"] = arguments;
+                consoleError("\n\ndebug\u0049nline");
+                consoleError.apply(console, arguments);
+                consoleError(new Error().stack + "\n");
+                // return arg0 for inspection
+                return arg0;
+            };
+        }());
+        // init local
+        local = {};
+        // init isBrowser
+        local.isBrowser = typeof window === "object" &&
+                typeof window.XMLHttpRequest === "function" &&
+                window.document &&
+                typeof window.document.querySelectorAll === "function";
+        // init global
+        local.global = local.isBrowser
+            ? window
+            : global;
+        // re-init local
+        local = local.global.utility2_rollup ||
+                // local.global.utility2_rollup_old || require("./assets.utility2.rollup.js") ||
+                local;
+        // init exports
+        if (local.isBrowser) {
+            local.global.utility2_jslint = local;
+        } else {
+            // require builtins
+            // local.assert = require("assert");
+            local.buffer = require("buffer");
+            local.child_process = require("child_process");
+            local.cluster = require("cluster");
+            local.crypto = require("crypto");
+            local.dgram = require("dgram");
+            local.dns = require("dns");
+            local.domain = require("domain");
+            local.events = require("events");
+            local.fs = require("fs");
+            local.http = require("http");
+            local.https = require("https");
+            local.net = require("net");
+            local.os = require("os");
+            local.path = require("path");
+            local.querystring = require("querystring");
+            local.readline = require("readline");
+            local.repl = require("repl");
+            local.stream = require("stream");
+            local.string_decoder = require("string_decoder");
+            local.timers = require("timers");
+            local.tls = require("tls");
+            local.tty = require("tty");
+            local.url = require("url");
+            local.util = require("util");
+            local.vm = require("vm");
+            local.zlib = require("zlib");
+            module.exports = local;
+            module.exports.__dirname = __dirname;
+        }
+        // init lib main
+        local.local = local;
+        local.jslint = local;
+
+
+
+        /* validateLineSortedReset */
+        local.cliRun = function (options) {
+        /*
+         * this function will run the cli
+         */
+            local.cliDict._eval = local.cliDict._eval || function () {
+            /*
+             * <code>
+             * will eval <code>
+             */
+                global.local = local;
+                local.vm.runInThisContext(process.argv[3]);
+            };
+            local.cliDict["--eval"] = local.cliDict["--eval"] || local.cliDict._eval;
+            local.cliDict["-e"] = local.cliDict["-e"] || local.cliDict._eval;
+            local.cliDict._help = local.cliDict._help || function () {
+            /*
+             *
+             * will print help
+             */
+                var commandList;
+                var file;
+                var packageJson;
+                var text;
+                var textDict;
+                commandList = [{
+                    argList: "<arg2>  ...",
+                    description: "usage:",
+                    command: ["<arg1>"]
+                }, {
+                    argList: "'console.log(\"hello world\")'",
+                    description: "example:",
+                    command: ["--eval"]
+                }];
+                file = __filename.replace((/.*\//), "");
+                options = Object.assign({}, options);
+                packageJson = require("./package.json");
+                // validate comment
+                options.rgxComment = options.rgxComment || new RegExp(
+                    "\\) \\{\\n" +
+                    "(?: {8}| {12})\\/\\*\\n" +
+                    "(?: {9}| {13})\\*((?: <[^>]*?>| \\.\\.\\.)*?)\\n" +
+                    "(?: {9}| {13})\\* (will .*?\\S)\\n" +
+                    "(?: {9}| {13})\\*\\/\\n" +
+                    "(?: {12}| {16})\\S"
+                );
+                textDict = {};
+                Object.keys(local.cliDict).sort().forEach(function (key, ii) {
+                    if (key[0] === "_" && key !== "_default") {
+                        return;
+                    }
+                    text = String(local.cliDict[key]);
+                    if (key === "_default") {
+                        key = "";
+                    }
+                    textDict[text] = textDict[text] || (ii + 2);
+                    ii = textDict[text];
+                    if (commandList[ii]) {
+                        commandList[ii].command.push(key);
+                        return;
+                    }
+                    try {
+                        commandList[ii] = options.rgxComment.exec(text);
+                        commandList[ii] = {
+                            argList: (commandList[ii][1] || "").trim(),
+                            command: [key],
+                            description: commandList[ii][2]
+                        };
+                    } catch (ignore) {
+                        throw new Error(
+                            "cliRun - cannot parse comment in COMMAND " +
+                            key + ":\nnew RegExp(" + JSON.stringify(options.rgxComment.source) +
+                            ").exec(" + JSON.stringify(text)
+                                .replace((/\\\\/g), "\u0000")
+                                .replace((/\\n/g), "\\n\\\n")
+                                .replace((/\u0000/g), "\\\\") + ");"
+                        );
+                    }
+                });
+                console.log(packageJson.name + " (" + packageJson.version + ")\n\n" + commandList
+                    .filter(function (element) {
+                        return element;
+                    })
+                    .map(function (element, ii) {
+                        element.command = element.command.filter(function (element) {
+                            return element;
+                        });
+                        switch (ii) {
+                        case 0:
+                        case 1:
+                            element.argList = [element.argList];
+                            break;
+                        default:
+                            element.argList = element.argList.split(" ");
+                            element.description = "# COMMAND " +
+                                    (element.command[0] || "<none>") + "\n# " +
+                                    element.description;
+                        }
+                        return element.description + "\n  " + file +
+                                ("  " + element.command.sort().join("|") + "  ")
+                            .replace((/^ {4}$/), "  ") +
+                                    element.argList.join("  ");
+                    })
+                    .join("\n\n"));
+            };
+            local.cliDict["--help"] = local.cliDict["--help"] || local.cliDict._help;
+            local.cliDict["-h"] = local.cliDict["-h"] || local.cliDict._help;
+            local.cliDict._default = local.cliDict._default || local.cliDict._help;
+            local.cliDict.help = local.cliDict.help || local.cliDict._help;
+            local.cliDict._interactive = local.cliDict._interactive || function () {
+            /*
+             *
+             * will start interactive-mode
+             */
+                global.local = local;
+                (local.replStart || require("repl").start)({useGlobal: true});
+            };
+            local.cliDict["--interactive"] = local.cliDict["--interactive"] ||
+                    local.cliDict._interactive;
+            local.cliDict["-i"] = local.cliDict["-i"] || local.cliDict._interactive;
+            local.cliDict._version = local.cliDict._version || function () {
+            /*
+             *
+             * will print version
+             */
+                console.log(require(__dirname + "/package.json").version);
+            };
+            local.cliDict["--version"] = local.cliDict["--version"] || local.cliDict._version;
+            local.cliDict["-v"] = local.cliDict["-v"] || local.cliDict._version;
+            // default to --help command if no arguments are given
+            if (process.argv.length <= 2) {
+                local.cliDict._help();
+                return;
+            }
+            if (local.cliDict[process.argv[2]]) {
+                local.cliDict[process.argv[2]]();
+                return;
+            }
+            local.cliDict._default();
+        };
+    }());
+
+
+
+    /* istanbul ignore next */
+    (function () {
+/* jslint-indent-offset 8 */
 /*
 file CSSLint/csslint.js
+2016-12-06T08:50:07Z - shGithubDateCommitted https://github.com/CSSLint/csslint/commits/v1.0.5
+https://github.com/CSSLint/csslint/blob/v1.0.5/dist/csslint.js
 utility2-uglifyjs https://raw.githubusercontent.com/CSSLint/csslint/v1.0.5/dist/csslint.js > /tmp/aa.js
 */
+/* jslint-ignore-block-beg */
 var CSSLint=function(){function s(e,t,n,r){"use strict";this.messages=[],this.stats=
 [],this.lines=e,this.ruleset=t,this.allow=n,this.allow||(this.allow={}),this.ignore=
 r,this.ignore||(this.ignore=[])}var e=e||{},t=t||{},n=function(){var e;return e=
@@ -1414,11 +1670,14 @@
 ){s=s+"\n\n"+u,e.rollup?(s+="\n"+(t+1)+": "+e.type,s+="\n"+e.message):(s+="\n"+(
 t+1)+": "+e.type+" at line "+e.line+", col "+e.col,s+="\n"+e.message,s+="\n"+e.evidence
 )}),s}}),i}()
+/* jslint-ignore-block-end */



 /*
 file JSLint/jslint.js - es6
+2018-05-14T16:48:42Z - shGithubDateCommitted https://github.com/douglascrockford/JSLint/commits/bf1faaae2399cb1c6efcf4ac40b1ac8d3e26b029
+https://github.com/douglascrockford/JSLint/blob/bf1faaae2399cb1c6efcf4ac40b1ac8d3e26b029/jslint.js
 node -e 'console.log(process.argv[1]
     .replace((/\bconst |\blet /g), "var ")
 )' "$(curl https://raw.githubusercontent.com/douglascrockford/JSLint/bf1faaae2399cb1c6efcf4ac40b1ac8d3e26b029/jslint.js)" > /tmp/aa.js
@@ -1510,7 +1769,8 @@

 // WARNING: JSLint will hurt your feelings.

-/*property
+// jslint-hack - property
+/*\property
     a, and, arity, assign, b, bad_assignment_a, bad_directive_a, bad_get,
     bad_module_name_a, bad_option_a, bad_property_a, bad_set, bitwise, block,
     body, browser, c, calls, catch, charCodeAt, closer, closure, code, column,
@@ -1548,7 +1808,7 @@
 */

 var jslint = (function JSLint() {
-    "use strict";
+    // jslint-hack - use-strict

     function empty() {

@@ -1761,7 +2021,7 @@
         expected_string_a: "Expected a string and instead saw '{a}'.",
         expected_type_string_a: "Expected a type string and instead saw '{a}'.",
         function_in_loop: "Don't make functions within a loop.",
-        infix_in: "Unexpected 'in'. Compare with undefined, or use the hasOwnProperty method instead.",
+        infix_in: "Unexpected 'in'. Compare with undefined, or use the hasOwnProperty method instead.", // jslint-ignore-line
         label_a: "'{a}' is a statement label.",
         misplaced_a: "Place '{a}' at the outermost level.",
         misplaced_directive_a: "Place the '/*{a}*/' directive before the first statement.",
@@ -1831,7 +2091,7 @@
 // carriage return, carriage return linefeed, or linefeed
     var rx_crlf = /\n|\r\n?/;
 // unsafe characters that are silently deleted by one or more browsers
-    var rx_unsafe = /[\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/;
+    var rx_unsafe = /[\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/; // jslint-ignore-line
 // identifier
     var rx_identifier = /^([a-zA-Z_$][a-zA-Z0-9_$]*)$/;
     var rx_module = /^[a-zA-Z0-9_$:.@\-\/]+$/;
@@ -1848,9 +2108,9 @@
     var rx_tab = /\t/g;
 // directive
     var rx_directive = /^(jslint|property|global)\s+(.*)$/;
-    var rx_directive_part = /^([a-zA-Z$_][a-zA-Z0-9$_]*)\s*(?::\s*(true|false|[0-9]+)\s*)?(?:,\s*)?(.*)$/;
+    var rx_directive_part = /^([a-zA-Z$_][a-zA-Z0-9$_]*)\s*(?::\s*(true|false|[0-9]+)\s*)?(?:,\s*)?(.*)$/; // jslint-ignore-line
 // token (sorry it is so long)
-    var rx_token = /^((\s+)|([a-zA-Z_$][a-zA-Z0-9_$]*)|[(){}\[\]?,:;'"~`]|=(?:==?|>)?|\.+|[*\/][*\/=]?|\+[=+]?|-[=\-]?|[\^%]=?|&[&=]?|\|[|=]?|>{1,3}=?|<<?=?|!(?:!|==?)?|(0|[1-9][0-9]*))(.*)$/;
+    var rx_token = /^((\s+)|([a-zA-Z_$][a-zA-Z0-9_$]*)|[(){}\[\]?,:;'"~`]|=(?:==?|>)?|\.+|[*\/][*\/=]?|\+[=+]?|-[=\-]?|[\^%]=?|&[&=]?|\|[|=]?|>{1,3}=?|<<?=?|!(?:!|==?)?|(0|[1-9][0-9]*))(.*)$/; // jslint-ignore-line
     var rx_digits = /^([0-9]+)(.*)$/;
     var rx_hexs = /^([0-9a-fA-F]+)(.*)$/;
     var rx_octals = /^([0-7]+)(.*)$/;
@@ -1968,11 +2228,13 @@
         if (d !== undefined) {
             warning.d = d;
         }
-        warning.message = supplant(bundle[code] || code, warning);
-        warnings.push(warning);
+        // jslint-hack - warnings.push
+        jslint.warnings_push(warning, warnings, supplant, bundle);
         return (
             typeof option.maxerr === "number"
             && warnings.length === option.maxerr
+            // jslint-hack - prettify
+            && !option.prettify
         )   ? stop_at("too_many", line, column)
             : warning;
     }
@@ -1981,6 +2243,11 @@

 // Same as warn_at, except that it stops the analysis.

+        // jslint-hack
+        if (option.prettify) {
+            warn_at(code, line, column, a, b, c, d);
+            return;
+        }
         throw warn_at(code, line, column, a, b, c, d);
     }

@@ -2017,6 +2284,11 @@
             the_token = next_token;
         }
         delete the_token.warning;
+        // jslint-hack
+        if (option.prettify) {
+            warn(code, the_token, a, b, c, d);
+            return;
+        }
         throw warn(code, the_token, a, b, c, d);
     }

@@ -2061,7 +2333,10 @@
             var at;
             column = 0;
             line += 1;
-            source_line = lines[line];
+            // jslint-hack - source_line
+            source_line = (lines[line] || {}).source;
+            source_line = jslint.next_line_before(source_line, line);
+            column += jslint.lineIndentOffset;
             if (source_line !== undefined) {
                 at = source_line.search(rx_tab);
                 if (at >= 0) {
@@ -2362,6 +2637,8 @@
 // Make a comment object. Comments are not allowed in JSON text. Comments can
 // include directives and notices of incompletion.

+            // jslint-hack - snippet
+            snippet = jslint.comment_before(snippet, line);
             var the_comment = make("(comment)", snippet);
             if (Array.isArray(snippet)) {
                 snippet = snippet.join(" ");
@@ -2376,6 +2653,11 @@
                 } else {
                     the_comment.directive = result[1];
                     parse_directive(the_comment, result[2]);
+                    // jslint-hack - prettify
+                    if (option.prettify) {
+                        option.single = null;
+                        option.white = null;
+                    }
                 }
                 directives.push(the_comment);
             }
@@ -2751,6 +3033,8 @@
             }
             from = column;
             result = source_line.match(rx_token);
+            // jslint-hack
+            jslint.result = result;

 // result[1] token
 // result[2] whitespace
@@ -2977,6 +3261,21 @@
             return make(snippet);
         }

+        // jslint-hack - init
+        bundle.unexpected_empty_lines = (
+            "Expected 0, 1, or 3 contiguous empty-lines after current line, instead of {a}."
+        );
+        fudge = 0;
+        jslint.lineIgnore = null;
+        jslint.lineIndentOffset = 0;
+        jslint.lineEmptyCount = -2;
+        jslint.option = option;
+        jslint.warn_at = warn_at;
+        jslint.warningsIfNoComment = [];
+        lines = lines.map(function (source) {
+            return {source: source};
+        });
+        jslint.lines = lines;
         first = lex();
         json_mode = first.id === "{" || first.id === "[";

@@ -3034,7 +3333,6 @@
 // If this is the first time seeing this property name, and if there is a
 // tenure list, then it must be on the list. Otherwise, it must conform to
 // the rules for good property names.
-
         } else {
             if (tenure !== undefined) {
                 if (tenure[id] !== true) {
@@ -3233,7 +3531,6 @@
                 );

 // Has the name been enrolled in an outer context?
-
             } else {
                 stack.forEach(function (value) {
                     var item = value.context[id];
@@ -3341,12 +3638,7 @@
         switch (the_value.id) {
         case "?":
         case "~":
-        case "&":
-        case "|":
-        case "^":
-        case "<<":
-        case ">>":
-        case ">>>":
+        // jslint-hack - bitwise
         case "+":
         case "-":
         case "*":
@@ -3357,6 +3649,17 @@
         case "(string)":
             warn("unexpected_a", the_value);
             break;
+        // jslint-hack - bitwise
+        case "&":
+        case "|":
+        case "^":
+        case "<<":
+        case ">>":
+        case ">>>":
+            if (!option.bitwise) {
+                warn("unexpected_a", the_value);
+            }
+            break;
         }
         return the_value;
     }
@@ -3645,6 +3948,9 @@
                 || (id !== "." && id !== "(" && id !== "[")
             )
         ) {
+            // jslint-hack - left, right
+            jslint.left = left;
+            jslint.right = right;
             warn("unexpected_a", right);
             return false;
         }
@@ -5079,7 +5385,6 @@
                 "catch",
                 artifact(next_token)
             );
-
         }
         if (next_token.id === "finally") {
             functionage.finally += 1;
@@ -5998,7 +6303,8 @@
                     var at = (free)
                         ? margin
                         : margin + 8;
-                    if (right.from < at) {
+                    // jslint-hack
+                    if (right.from !== at) {
                         expected_at(at);
                     }
                 } else {
@@ -6032,7 +6338,8 @@
                 }
             } else {
                 if (free) {
-                    if (right.from < margin) {
+                    // jslint-hack
+                    if (right.from !== margin) {
                         expected_at(margin);
                     }
                 } else {
@@ -6153,7 +6460,6 @@
 // If left is , or ; or right is a statement then if open, right must go at the
 // margin, or if closed, a space between.

-
                         if (right.switch) {
                             unqmark();
                             at_margin(-4);
@@ -6174,7 +6480,6 @@

 // If right is a ternary operator, line it up on the margin. Use qmark to
 // deal with nested ternary operators.
-
                         } else if (right.arity === "ternary") {
                             if (right.id === "?") {
                                 margin += 4;
@@ -6440,8 +6745,18 @@
             stop: early_stop,
             tokens: tokens,
             tree: tree,
-            warnings: warnings.sort(function (a, b) {
-                return a.line - b.line || a.column - b.column;
+            // jslint-hack - warnings.sort
+            scriptParsed: lines.map(function (aa) {
+                return (aa.sourceParsed || aa.source).trimRight();
+            }).join("\n"),
+            warnings: warnings.concat(jslint.warningsIfNoComment.filter(function (warning) {
+                return !lines[warning.line].hasComment;
+            })).sort(function (a, b) {
+                return a.code === "too_many"
+                    ? 1
+                    : b.code === "too_many"
+                        ? -1
+                        : a.line - b.line || a.column - b.column;
             })
         };
     };
@@ -6449,3 +6764,663 @@
 /*
 file none
 */
+local.CSSLint = CSSLint; local.jslintEs6 = jslint; // jslint-ignore-line
+/* jslint-indent-offset 0 */
+    }());
+
+
+
+/* validateLineSortedReset */
+    // run shared js-env code - function
+    (function () {
+        var jslint;
+        jslint = local.jslintEs6;
+
+        jslint.comment_before = function (snippet, line) {
+        /*
+         * this function will run before the jslint-function comment()
+         */
+            if (typeof snippet === "string") {
+                jslint.lines[line].hasComment = true;
+                return snippet;
+            }
+            snippet.forEach(function (ignore, ii) {
+                jslint.lines[ii + line - snippet.length + 1].hasComment = true;
+            });
+            return snippet;
+        };
+
+        jslint.next_line_before = function (source_line, line) {
+        /*
+         * this function will run before the jslint-function next_line()
+         */
+            var match;
+            // eof
+            if (typeof source_line !== "string") {
+                return;
+            }
+            // ignore shebang
+            if (line === 0 && source_line.slice(0, 2) === "#!") {
+                return "";
+            }
+            match = source_line.slice(-100);
+            match = (
+                match.match(/ \/\/ jslint-(ignore-line)$/m)
+                || match.match(
+                    /^ *?\/\* jslint-(debug|ignore-block-beg|ignore-block-end|utility2) \*\/$/m
+                )
+                || match.match(/^ *?\/\* jslint-(indent-offset) (\d+) ?\*\/$/m)
+            );
+            switch (match && match[1]) {
+            case "debug":
+            case "utility2":
+                jslint.option[match[1]] = true;
+                break;
+            case "ignore-block-beg":
+                jslint.lineIgnore = true;
+                break;
+            case "ignore-line":
+                jslint.lineIgnore = "line";
+                break;
+            case "ignore-block-end":
+                jslint.lineIgnore = null;
+                break;
+            case "indent-offset":
+                jslint.lineIndentOffset = Number(match[2]);
+                break;
+            }
+            Object.assign(jslint.lines[line], {
+                ignore: jslint.lineIgnore,
+                indentOffset: jslint.lineIndentOffset,
+                line: line
+            });
+            if (source_line || jslint.lineIgnore) {
+                switch (jslint.lineEmptyCount) {
+                case -2:
+                case 0:
+                case 1:
+                case 3:
+                    break;
+                default:
+                    jslint.warn_at(
+                        "unexpected_empty_lines",
+                        line - jslint.lineEmptyCount + 1,
+                        0,
+                        jslint.lineEmptyCount
+                    );
+                }
+                jslint.lineEmptyCount = -1;
+            }
+            if (jslint.lineEmptyCount >= -1) {
+                jslint.lineEmptyCount += 1;
+            }
+            if (jslint.lineIgnore === "line") {
+                jslint.lineIgnore = null;
+            }
+            return jslint.lineIgnore
+                ? ""
+                : source_line;
+        };
+
+        jslint.warnings_push = function (warning, warnings, supplant, bundle) {
+        /*
+         * this function will ignore certain jslint-warnings
+         */
+            var tmp;
+            Object.assign(warning, jslint.lines[warning.line]);
+            // indent - normalize
+            ["column", "b", "c"].forEach(function (key) {
+                if (typeof warning[key] === "number") {
+                    warning[key] -= Math.min(warning.indentOffset, warning[key]) - 1;
+                }
+            });
+            // init message
+            warning.message = supplant(bundle[warning.code] || warning.code, warning);
+            // indent - normalize
+            ["column", "b", "c"].forEach(function (key) {
+                if (typeof warning[key] === "number") {
+                    warning[key] -= 1;
+                }
+            });
+            // jslint-warning - default
+            if (!jslint.option.utility2) {
+                warnings.push(warning);
+                return;
+            }
+            // jslint-warning - ignore
+            switch (Boolean(warning.ignore) || warning.message) {
+            case true:
+            case "Expected '!' and instead saw '?'.":
+            case "Expected '\\s' and instead saw ' '.":
+            case "Expected '\\u0020' and instead saw ' '.":
+            case "Unexpected 'arguments'.":
+            case "Unexpected 'instanceof'.":
+            case "Weird condition '&&'.":
+            case "Weird expression 'self[...]'.":
+            case "Weird expression 'window[...]'.":
+                return;
+            }
+            ["left", "right"].forEach(function (key) {
+                warning[key] = Object.assign({}, jslint[key]);
+                warning[key].expression = null;
+                warning[key].warning = null;
+            });
+            switch (warning.code) {
+            case "bad_property_a":
+                return;
+            case "unexpected_a":
+                switch (
+                    JSON.stringify(warning.left.wrapped || warning.left.id) +
+                    " " + warning.right.id
+                ) {
+                case "true (":
+                case "true .":
+                case "true [":
+                case "\"[\" .":
+                    return;
+                }
+                break;
+            }
+            // jslint-warning - accept
+            warning.a = warning.a || JSON.stringify(warning.source.trim().slice(0, 20) + "...");
+            // init stack-trace
+            if (jslint.option.debug) {
+                warning.stack = new Error().stack;
+            }
+            switch (warning.code) {
+            case "expected_a_at_b_c":
+                tmp = warning.b - warning.c;
+                // indent - add
+                if (tmp >= 0) {
+                    jslint.lines[warning.line].sourceParsed = " ".repeat(tmp) + warning.source;
+                    break;
+                }
+                tmp = -tmp;
+                // indent - remove
+                if ((/^ *?$/m).test(warning.source.slice(0, warning.column))) {
+                    jslint.lines[warning.line].sourceParsed = warning.source.slice(tmp);
+                    break;
+                }
+                // indent - newline
+                jslint.lines[warning.line].sourceParsed =
+                        warning.source.slice(0, warning.column) + "\n" + " ".repeat(warning.b) +
+                        warning.source.slice(warning.column);
+                break;
+            // indent - newline
+            case "expected_a_next_at_b":
+                jslint.lines[warning.line].sourceParsed =
+                        warning.source.slice(0, warning.column) + "\n" + " ".repeat(warning.b) +
+                        warning.source.slice(warning.column);
+                break;
+            // key - replace 100: -> "100":
+            case "expected_identifier_a":
+                if (!(
+                    (/^\d+$/m).test(warning.a)
+                    && warning.source[warning.column + warning.a.length] === ":"
+                )) {
+                    break;
+                }
+                jslint.lines[warning.line].sourceParsed =
+                        warning.source.slice(0, warning.column) + "\"" + warning.a + "\"" +
+                        warning.source.slice(warning.column + warning.a.length);
+                break;
+            // whitespace - remove
+            case "unexpected_space_a_b":
+                jslint.lines[warning.line].sourceParsed =
+                        warning.source.slice(0, warning.column - 1) +
+                        warning.source.slice(warning.column);
+                break;
+            // quote - single -> double
+            case "use_double":
+                tmp = jslint.option.prettify && jslint.result[0]
+                    .replace((/\\\\/g), "\u0000\u0000")
+                    .replace((/\\'/g), "\u0000\u0001")
+                    .match(/^'.*?'/);
+                if (!tmp) {
+                    break;
+                }
+                tmp = tmp[0].slice(1, -1);
+                jslint.lines[warning.line].sourceParsed =
+                        warning.source.slice(0, warning.column - 1) + "\"" + tmp
+                    .replace((/\\?"/g), "\\\"")
+                    .replace((/\u0000\u0000/g), "\\\\")
+                    .replace((/\u0000\u0001/g), "'") +
+                            "\"" + warning.source.slice(warning.column + tmp.length + 1);
+                break;
+            // jslint-warning - accept - if no comment
+            case "too_long":
+                if (jslint.option.prettify) {
+                    return;
+                }
+                jslint.warningsIfNoComment.push(warning);
+                return;
+            default:
+                if (jslint.option.prettify) {
+                    return;
+                }
+            }
+            warnings.push(warning);
+        };
+
+        local.csslintUtility2 = function (script) {
+        /*
+         * this function will csslint the script with utility2-specific rules
+         */
+            var current1;
+            var current2;
+            var ii;
+            var jj;
+            var message;
+            var previous1;
+            var previous2;
+            // ignore comments
+            script = script.replace((/^ *?\/\*[\S\s]*?\*\/ *?$/gm), function (match0) {
+                if (match0 === "/* validateLineSortedReset */") {
+                    return match0;
+                }
+                // preserve lineno
+                return match0.replace((/^.*?$/gm), "");
+            });
+            ii = 0;
+            current1 = "";
+            current2 = "";
+            previous1 = "";
+            previous2 = "";
+            script.replace((/^.*?$/gm), function (line) {
+                current1 = line;
+                ii += 1;
+                jj = 0;
+                message = "";
+                if (!current1) {
+                    return;
+                }
+                // validate whitespace-before-comma
+                if ((/ ,/).test(current1)) {
+                    jj = jj || ((/ ,/).exec(current1).index + 2);
+                    message = message || "whitespace-before-comma";
+                }
+                // validate double-whitespace
+                if ((/\S {2}/).test(current1)) {
+                    jj = jj || ((/\S {2}/).exec(current1).index + 2);
+                    message = message || "double-whitespace";
+                }
+                // ignore indent
+                if (!message && current1[0] === " ") {
+                    return;
+                }
+                // validate multi-line-statement
+                if ((/[,;{}]./).test(current1)) {
+                    jj = jj || ((/[,;{}]./).exec(current1).index + 1);
+                    message = message || "multi-line-statement";
+                }
+                // validateLineSortedReset
+                if (current1 === "/* validateLineSortedReset */") {
+                    current1 = "";
+                    current2 = "";
+                    previous1 = "";
+                    previous2 = "";
+                    return;
+                }
+                // validate previous1 < current1
+                current1 = current1
+                    .replace((/^#/gm), "|")
+                    .replace((/,$/gm), "   ,")
+                    .replace((/( \{$|:)/gm), "  $1")
+                    .replace((/(^[\w*@]| \w)/gm), " $1");
+                if (!(previous1 < current1)) {
+                    jj = jj || 1;
+                    message = message ||
+                            ("lines not sorted\n" + previous1 + "\n" + current1).trim();
+                }
+                previous1 = current1;
+                // validate previous2 < current2
+                current2 += current1 + "\n";
+                if (current1 === "}") {
+                    current2 = current2.slice(0, -3);
+                    if (!(previous2 < current2)) {
+                        jj = jj || 1;
+                        message = message ||
+                                ("lines not sorted\n" + previous2 + "\n" + current2)
+                            .replace((/\n\|/g), "\n#")
+                            .trim();
+                    }
+                    previous1 = "";
+                    previous2 = current2;
+                    current2 = "";
+                }
+                if (!message) {
+                    return;
+                }
+                local.errorList.push({col: jj, line: ii, message: message, value: line});
+            });
+        };
+
+        local.jslintAndPrint = function (script, file, options) {
+        /*
+         * this function will jslint / csslint the script and print any errors to stderr
+         */
+            var ii;
+            var jj;
+            var lintType;
+            var message;
+            var modePrettify;
+            var scriptParsed;
+            // init options
+            options = Object.assign({}, options);
+            // handle options.prettify
+            if (options.prettify) {
+                modePrettify = options.prettify;
+                options.prettify = null;
+                options.white = true;
+                options.single = true;
+            }
+            // cleanup error
+            local.errorList = [];
+            local.errorText = "";
+            local.errorFile = file;
+            // null-case
+            if (!(script && script.length)) {
+                return "";
+            }
+            switch (file.replace((/^.*\./), ".")) {
+            // csslint script
+            case ".css":
+                lintType = "csslint";
+                local.CSSLint.errors = local.CSSLint.verify(script).messages;
+                local.CSSLint.errors.forEach(function (error) {
+                    error.message = error.type + " - " + error.rule.id + " - " + error.message +
+                            "\n    " + error.rule.desc;
+                    local.errorList.push(error);
+                });
+                break;
+            // shlint script
+            case ".sh":
+                lintType = "shlint";
+                break;
+            // jslint script
+            default:
+                local.jslintResult = jslint(script, options);
+                local.errorList = local.jslintResult.warnings.filter(function (error) {
+                    return error && error.message;
+                }).map(function (error) {
+                    error.col = error.column + 1;
+                    error.line = error.line + 1;
+                    error.evidence = error.source;
+                    return error;
+                });
+            }
+            // jslint the script with utiity2-specific rules
+            if (
+                !local.errorList.length &&
+                (/^\/\* jslint-utility2 \*\/$|^# jslint-utility2$/m).test(script)
+            ) {
+                ii = 0;
+                script
+                    // ignore text-block
+                    .replace(
+/* jslint-ignore-block-beg */
+(/^ *?\/\* jslint-ignore-block-beg \*\/$[\S\s]+?^ *?\/\* jslint-ignore-block-end \*\/$/gm),
+/* jslint-ignore-block-end */
+                        function (match0) {
+                            return match0.replace((/^.*?$/gm), "");
+                        }
+                    )
+                    .replace((/^.*?$/gm), function (line) {
+                        ii += 1;
+                        jj = 0;
+                        message = "";
+                        // validate 4-space indent
+                        if (
+                            !(/^ +(?:\*|\/\/!!)/).test(line)
+                            && ((/^ */).exec(line)[0].length % 4 !== 0)
+                        ) {
+                            jj = jj || 1;
+                            message = message || "non 4-space indent";
+                        }
+                        // validate trailing-whitespace
+                        if ((/ $| \\n\\$/m).test(line)) {
+                            jj = jj || line.length;
+                            message = message || "trailing whitespace";
+                        }
+                        // validate tab
+                        if (line.indexOf("\t") >= 0) {
+                            jj = jj || (line.indexOf("\t") + 1);
+                            message = message || "tab detected";
+                        }
+                        if (message) {
+                            local.errorList.push({
+                                col: jj,
+                                line: ii,
+                                message: message,
+                                value: JSON.stringify(line)
+                            });
+                        }
+                    });
+                switch (file.replace((/^.*\./), ".")) {
+                case ".css":
+                    local.csslintUtility2(script);
+                    break;
+                case ".sh":
+                    local.shlintUtility2(script);
+                    break;
+                default:
+                    local.jslintUtility2(script);
+                }
+            }
+            // if error occurred, then print colorized error messages
+            local.errorList = local.errorList.filter(function (error) {
+                return error && error.message;
+            });
+            local.errorList.forEach(function (error, ii) {
+                local.errorText = local.errorText ||
+                        "\u001b[1m" + (lintType || "jslint") + " " + file + "\u001b[22m\n";
+                local.errorText += (
+                    (" #" + String(ii + 1) + " ").slice(-4) +
+                    "\u001b[31m" + error.message + "\u001b[39m\n" +
+                    "    " + String(error.evidence).trim().slice(0, 80) +
+                    "\u001b[90m \/\/ line " + error.line + ", col " + (error.col) + "\u001b[39m\n"
+                );
+                if (!ii && error.stack) {
+                    ii = error.stack;
+                    error.stack = null;
+                    local.errorText += JSON.stringify(error, null, 4) + "\n" +
+                            ii.trim() + "\n";
+                }
+            });
+            local.errorText = local.errorText.trim();
+            // print error to stderr
+            if (local.errorText) {
+                console.error(local.errorText);
+            }
+            // prettify
+            options.prettify = modePrettify;
+            if (options.prettify) {
+                options.white = null;
+                options.single = null;
+                do {
+                    scriptParsed = script;
+                    script = jslint(script, options).scriptParsed;
+                } while (script !== scriptParsed);
+            }
+            return script;
+        };
+
+        local.jslintUtility2 = function (script) {
+        /*
+         * this function will jslint the script with utiity2-specific rules
+         */
+            var current;
+            var lineno;
+            var previous;
+            var rgx;
+            var tmp;
+            lineno = 0;
+            rgx = new RegExp(
+                "^ *?\\/\\* validateLineSortedReset \\*\\/$|" +
+                "^ {4}\\/\\/ run .*?\\bjs\\\\?-env code\\b|" +
+                "^\\/\\/ rollup-file "
+            );
+            previous = "";
+            script.replace((/^.*?$/gm), function (line) {
+                current = line.trim();
+                lineno += 1;
+                // validate <domElement>.classList sorted
+                tmp = (/\bclass=\\?"([^"]+?)\\?"/gm).exec(current);
+                tmp = JSON.stringify((tmp && tmp[1].replace((/^ /), "zSpace").match(
+                    / {2}| $|\w\S*?\{\{[^}]*?\}\}|\w\S*|\{\{[^}]*?\}\}/gm
+                )) || []);
+                if (JSON.stringify(JSON.parse(tmp).sort()) !== tmp) {
+                    local.errorList.push({
+                        col: 0,
+                        line: lineno,
+                        message: "<domElement>.classList not sorted - " + tmp,
+                        value: line
+                    });
+                }
+                // validate line-sorted
+                if (rgx.test(line)) {
+                    previous = "";
+                    return;
+                }
+                if (
+                    !(/^(?: {4}| {8})local\.\S*? =(?: |$)/m).test(line) ||
+                    (/^local\.(?:global|isBrowser|local|tmp)\b|\\n\\$/).test(current)
+                ) {
+                    return;
+                }
+                // validate previous < current
+                if (!(previous < current || (/ =$/).test(previous))) {
+                    local.errorList.push({
+                        col: 0,
+                        line: lineno,
+                        message: "lines not sorted\n" + previous + "\n" + current,
+                        value: line
+                    });
+                }
+                previous = current;
+            });
+        };
+
+        local.jslintUtility22 = function (str) {
+        /*
+         * this function will parse the js str
+         */
+            // \u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007
+            // \b\t\n\u000b\f\r\u000e\u000f
+            // \u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017
+            // \u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f
+            // !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNO
+            // PQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~
+            // aa = local.stringParseJs(local.assetsDict["/assets.example.js"]); console.log(aa);
+            var element, ii, match, result, rgx, rgxDict;
+            rgxDict = {
+                "\"": (/[\S\s]*?"/g),
+                "'": (/[\S\s]*?'/g),
+                "/": (/.*?\//g),
+                "/*": (/[\S\s]*?\*\//g),
+                "//": (/.*?$/gm),
+                "`": (/[\S\s]*?`/g)
+            };
+            str = str
+                .replace((/[^\n\u0020-\u007e]/g), " ")
+                .replace((/\\\\/g), "  ")
+                .replace((/\\[^\n]/g), "  ");
+            ii = 0;
+            result = [];
+            rgx = (/\/\*|\/\/|["'\/`]/g);
+            for (match = rgx.exec(str); match; match = rgx.exec(str)) {
+                result.push({src: str.slice(ii, match.index), type: ""});
+                element = {src: match[0], type: match[0]};
+                result.push(element);
+                rgxDict[match[0]].lastIndex = rgx.lastIndex;
+                element.src += rgxDict[match[0]].exec(str)[0];
+                ii = rgxDict[match[0]].lastIndex;
+                rgx.lastIndex = ii;
+            }
+            result.push({src: str.slice(ii)});
+            return result;
+        };
+
+        local.shlintUtility2 = function (script) {
+        /*
+         * this function will shlint the script with utility2-specific rules
+         */
+            var lineno;
+            var previous;
+            lineno = 0;
+            previous = "";
+            script.replace((/^.*?$/gm), function (line) {
+                lineno += 1;
+                if (!(/^sh\w+? \(\) \{/).test(line)) {
+                    return;
+                }
+                // validate previous < line
+                if (!(previous < line)) {
+                    local.errorList.push({
+                        col: 0,
+                        line: lineno,
+                        message: "lines not sorted\n" + previous + "\n" + line,
+                        value: line
+                    });
+                }
+                previous = line;
+            });
+        };
+    }());
+
+
+
+    /* istanbul ignore next */
+    // run node js-env code - init-after
+    (function () {
+        if (local.isBrowser) {
+            return;
+        }
+
+        local.cliDict = {};
+
+        local.cliDict._default = function () {
+        /*
+         * <file1> <file2> ...
+         * will jslint <file1> <file2> ... and print errors to stderr
+         */
+            // jslint files
+            process.argv.slice(2).forEach(function (file) {
+                if (file[0] === "-") {
+                    return;
+                }
+                local.jslintAndPrint(local.fs.readFileSync(local.path.resolve(file), "utf8"), file);
+            });
+            // if error occurred, then exit with non-zero code
+            process.exit(Boolean(local.errorList.length));
+        };
+
+        local.cliDict.prettify = function () {
+        /*
+         * <file1> <file2> ...
+         * will try to inplace prettify <file1> <file2> ...
+         */
+            // jslint files
+            process.argv.slice(3).forEach(function (file) {
+                if (file[0] === "-") {
+                    return;
+                }
+                local.fs.writeFileSync(
+                    file,
+                    local.jslintAndPrint(
+                        local.fs.readFileSync(local.path.resolve(file), "utf8"),
+                        file,
+                        {prettify: true}
+                    )
+                );
+            });
+            // if error occurred, then exit with non-zero code
+            process.exit(Boolean(local.errorList.length));
+        };
+
+        // run cli
+        if (module === require.main && !local.global.utility2_rollup) {
+            local.cliRun();
+        }
+    }());
+}());
